{"version":3,"file":"component---src-pages-blog-mdx-frontmatter-slug-tsx-content-file-path-users-jd-documents-dev-portfolio-projects-jlearn-mdx-8543ef1db8a1c7de7360.js","mappings":"mIAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,GAAI,KACJC,GAAI,KACJC,EAAG,MACFC,EAAAA,EAAAA,MAAsBT,EAAMU,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBV,EAAYG,GAAI,KAAM,eAAgB,KAAMO,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,mFAAoF,KAAMM,EAAAA,cAAoBV,EAAYI,EAAG,KAAM,aAAc,KAAMM,EAAAA,cAAoBV,EAAYK,GAAI,KAAM,KAAMK,EAAAA,cAAoBV,EAAYM,GAAI,KAAM,gCAAiC,KAAMI,EAAAA,cAAoBV,EAAYM,GAAI,KAAM,2FAA4F,KAAMI,EAAAA,cAAoBV,EAAYM,GAAI,KAAM,wFAAyF,MAAO,KAAMI,EAAAA,cAAoBV,EAAYI,EAAG,KAAMM,EAAAA,cAAoBV,EAAYO,EAAG,CACxxBI,KAAM,mCACNC,OAAQ,SACRC,IAAK,gCACJ,iBACL,CAKA,IAJA,SAAoBd,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOe,QAASC,GAAad,OAAOC,OAAO,CAAC,GAAGM,EAAAA,EAAAA,MAAsBT,EAAMU,YAC3E,OAAOM,EAAYL,EAAAA,cAAoBK,EAAWhB,EAAOW,EAAAA,cAAoBZ,EAAmBC,IAAUD,EAAkBC,EAC9H,C,0IChBA,MAAMiB,EAAWjB,IACfkB,QAAQC,IAAI,QAASnB,GACrB,MAAM,KAACoB,EAAI,SAAEC,GAAYrB,EAGzB,OAFAkB,QAAQC,IAAI,OAAQC,GACpBF,QAAQC,IAAI,WAAYE,GACjBV,EAAAA,cAAoBW,EAAAA,EAAQ,CACjCC,UAAWH,EAAKI,IAAIC,YAAYC,OAC/Bf,EAAAA,cAAoB,IAAK,KAAMS,EAAKI,IAAIC,YAAYE,MAAON,EAAS,EAG5DO,EAAOC,IAClB,IAAI,KAACT,GAAQS,EACb,OAAOlB,EAAAA,cAAoBmB,EAAAA,EAAK,CAC9BJ,MAAON,EAAKI,IAAIC,YAAYC,OAC5B,EAGW,SAASK,EAAiB/B,GACvC,OAAOW,EAAAA,cAAoBM,EAAUjB,EAAOW,EAAAA,cAAoBqB,EAAAA,EAAqBhC,GACvF,C,+ECyBA,MA1Ce6B,IAA8B,IAA7B,UAAEN,EAAS,SAAEF,GAAU,GACxBY,EAAAA,EAAAA,gBAAe,cAU5B,OACEtB,EAAAA,cAAAA,MAAAA,CAAKuB,UCjBc,kCDiBQ,WAAS,OAAO,oBAAkB,QAsB3DvB,EAAAA,cAAAA,OAAAA,KAEGU,GAEC,C,+CEvBV,IAlBYQ,IAAgB,IAAf,MAAEH,GAAO,EACpB,MAAMN,GAAOa,EAAAA,EAAAA,gBAAe,cAU5B,OACEtB,EAAAA,cAAAA,QAAAA,KACGe,EAAK,MAAKN,EAAKe,KAAKC,aAAaV,MAC5B,C,sECeL,MAAMW,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiB5B,GAC/B,MAAM6B,EAAoB,aAAiBF,GAE3C,OAAO,WAAc,IAEO,mBAAf3B,EACFA,EAAW6B,GAGb,IAAIA,KAAsB7B,IAChC,CAAC6B,EAAmB7B,GACzB,C","sources":["webpack://portfolio/./projects/jlearn.mdx","webpack://portfolio/./src/pages/blog/{mdx.frontmatter__slug}.tsx","webpack://portfolio/./src/components/layout.tsx","webpack://portfolio/./src/styles/global.module.css","webpack://portfolio/./src/components/seo.tsx","webpack://portfolio/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"Inspiration\"), \"\\n\", React.createElement(_components.p, null, \"jLearn is a web app to help me with my personal journey of learning Vietnamese.\"), \"\\n\", React.createElement(_components.p, null, \"This app:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"helps me note down new words\"), \"\\n\", React.createElement(_components.li, null, \"has a revise system that helps me actively recall new words that I have recently learnt\"), \"\\n\", React.createElement(_components.li, null, \"has statistics to see how how many new words I have acquired over a certain interval\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://jlearn.netlify.app/login\",\n    target: \"_blank\",\n    rel: \"nofollow noopener noreferrer\"\n  }, \"View Project\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/jd/Documents/dev/portfolio/projects/jlearn.mdx\";\nimport * as React from \"react\";\nimport Layout from \"../../components/layout\";\nimport Seo from \"../../components/seo\";\nconst BlogPost = props => {\n  console.log(\"props\", props);\n  const {data, children} = props;\n  console.log(\"data\", data);\n  console.log(\"children\", children);\n  return React.createElement(Layout, {\n    pageTitle: data.mdx.frontmatter.title\n  }, React.createElement(\"p\", null, data.mdx.frontmatter.date), children);\n};\nconst query = \"1083539204\";\nexport const Head = _ref => {\n  let {data} = _ref;\n  return React.createElement(Seo, {\n    title: data.mdx.frontmatter.title\n  });\n};\nBlogPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPost, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","import { graphql, useStaticQuery } from \"gatsby\";\nimport * as React from \"react\";\nimport { DarkModeToggle } from \"./dark-mode-toggle\";\nimport \"../styles/global.scss\";\nimport { container, siteTitle } from \"../styles/global.module.css\";\n\nconst Layout = ({ pageTitle, children }) => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `);\n\n  return (\n    <div className={container} data-sal=\"fade\" data-sal-duration=\"2000\">\n      {/* <nav> */}\n      {/* <DarkModeToggle /> */}\n      {/* <header className={siteTitle}>{data.site.siteMetadata.title}</header> */}\n      {/* <ul className={navLinks}>\n          <li className={navLinkItem}>\n            <Link to=\"/\" className={navLinkText}>\n              Home\n            </Link>\n          </li>\n          <li className={navLinkItem}>\n            <Link to=\"/about\" className={navLinkText}>\n              About\n            </Link>\n          </li>\n          <li className={navLinkItem}>\n            <Link to=\"/blog\" className={navLinkText}>\n              Blog\n            </Link>\n          </li>\n        </ul>\n      </nav> */}\n      <main>\n        {/* <h1 className={heading}>{pageTitle}</h1> */}\n        {children}\n      </main>\n    </div>\n  );\n};\n\nexport default Layout;\n","// extracted by mini-css-extract-plugin\nexport var container = \"global-module--container--d3c6d\";\nexport var flexContainer = \"global-module--flex-container--70bec\";\nexport var heading = \"global-module--heading--37858\";\nexport var navLinkItem = \"global-module--nav-link-item--711ec\";\nexport var navLinkText = \"global-module--nav-link-text--c24e5\";\nexport var navLinks = \"global-module--nav-links--08293\";\nexport var siteTitle = \"global-module--site-title--325b6\";","import * as React from \"react\";\nimport { graphql, useStaticQuery } from \"gatsby\";\n\nconst Seo = ({ title }) => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `);\n\n  return (\n    <title>\n      {title} | {data.site.siteMetadata.title}\n    </title>\n  );\n};\n\nexport default Seo;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode} [children]\n *   Children.\n *\n * @callback MergeComponents\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components|MergeComponents} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  let allComponents = useMDXComponents(components)\n\n  if (disableParentContext) {\n    allComponents = components || emptyObject\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","ul","li","a","_provideComponents","components","React","href","target","rel","wrapper","MDXLayout","BlogPost","console","log","data","children","Layout","pageTitle","mdx","frontmatter","title","date","Head","_ref","Seo","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","useStaticQuery","className","site","siteMetadata","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}